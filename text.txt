/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   mini_sort.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: maoliiny <maoliiny@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/09 19:08:26 by maoliiny          #+#    #+#             */
/*   Updated: 2025/05/09 19:09:56 by maoliiny         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void	sort_five(t_pss *a, t_pss *b)
{
	if (a->size > 3)
	{
		while (a->stack[0] != ft_min(*a))
			rotate(RA, a);
		pp(PB, a, b);
		while (a->stack[0] != ft_max(*a))
			rotate(RA, a);
		pp(PB, a, b);
	}
	if (a->size > 0)
	{
		while (a->stack[a->size - 1] != ft_max(*a))
			rotate(RA, a);
		if (a->stack[0] != ft_min(*a))
			swap_op(SA, a);
	}
	if (b->size == 2 || b->size == 1)
	{
		pp(PA, b, a);
		rotate(RA, a);
		pp(PA, b, a);
	}
}

long	ft_max(t_pss a)
{
	size_t	i;
	long	max;

	i = 1;
	if (a.size == 0)
		return (-2147483649);
	max = a.stack[0];
	while (i < a.size)
	{
		if (a.stack[i] > max)
			max = a.stack[i];
		i++;
	}
	return (max);
}

long	ft_min(t_pss a)
{
	size_t	i;
	long	min;

	i = 1;
	min = a.stack[0];
	if (a.size == 0)
		return (2147483649);
	while (i < a.size)
	{
		if (a.stack[i] < min)
			min = a.stack[i];
		i++;
	}
	return (min);
}

size_t	find_pos(t_pss b, long num)
{
	size_t	pos;
	size_t	i;

	pos = 0;
	i = 0;
	if (b.size == 0)
		return (0);
	while (i < b.size)
	{
		if (num < b.stack[i])
			pos++;
		i++;
	}
	return (pos);
}

size_t	find_index(t_pss stack, long target)
{
	size_t	i;

	i = 0;
	while (i < stack.size)
	{
		if (stack.stack[i] == target)
			return (i);
		i++;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   operations.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: maoliiny <maoliiny@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/08 11:03:39 by maoliiny          #+#    #+#             */
/*   Updated: 2025/05/08 17:23:20 by maoliiny         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void	ss(t_pss a, t_pss b)
{
	ft_printf("ss\n");
	top_swap(a);
	top_swap(b);
}

void	pp(const char *op_name, t_pss *from, t_pss *to)
{
	if (from->size == 0)
		return ;
	ft_printf("%s\n", op_name);
	to->size = to->size + 1;
	rrotate(NULL, to);
	ft_swap(&from->stack[0], &to->stack[0]);
	rotate(NULL, from);
	from->size = from->size - 1;
}

void	rotate(char *name, t_pss *stack)
{
	size_t	i;
	long	first;
	size_t	size;

	size = stack->size;
	i = 0;
	if (size < 2)
		return ;
	first = stack->stack[0];
	while (i < size - 1)
	{
		stack->stack[i] = stack->stack[i + 1];
		i++;
	}
	stack->stack[size - 1] = first;
	if (name != NULL)
		ft_printf("%s\n", name);
}

void	rrotate(char *name, t_pss *stack)
{
	size_t	i;
	long	last;
	size_t	size;

	size = stack->size;
	if (size < 2)
		return ;
	last = stack->stack[size - 1];
	i = size - 1;
	while (i > 0)
	{
		stack->stack[i] = stack->stack[i - 1];
		i--;
	}
	stack->stack[0] = last;
	if (name != NULL)
		ft_printf("%s\n", name);
}

void	dual_rotate(const char *name, t_pss a, t_pss b)
{
	if (ft_memcmp(name, "rr", ft_strlen(name)) == 0)
	{
		rotate(NULL, &a);
		rotate(NULL, &b);
	}
	else if (ft_memcmp(name, "rrr", ft_strlen(name)) == 0)
	{
		rrotate(NULL, &a);
		rrotate(NULL, &b);
	}
	ft_printf("%s\n", name);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ps_utils.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: maoliiny <maoliiny@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/08 12:58:40 by maoliiny          #+#    #+#             */
/*   Updated: 2025/05/09 19:07:57 by maoliiny         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void	swap_op(const char *name, t_pss *stack)
{
	ft_printf("%s\n", name);
	if (stack->size == 0 || stack->size == 1)
		return ;
	else
		ft_swap(&stack->stack[0], &stack->stack[1]);
}

void	ft_swap(long *a, long *b)
{
	long	temp;

	temp = *a;
	*a = *b;
	*b = temp;
}

void	top_swap(t_pss stack)
{
	if (stack.size == 0 || stack.size == 1)
		return ;
	else
		ft_swap(&stack.stack[0], &stack.stack[1]);
}

void	print_error_and_exit(long *a, long *b)
{
	if (a)
		free(a);
	if (b)
		free(b);
	write(2, "Error\n", 6);
	exit(EXIT_FAILURE);
}

int	ft_is_sort(t_pss a)
{
	size_t	i;

	i = 0;
	while (i < a.size - 1)
	{
		if (a.stack[i] - a.stack[i + 1] > 0)
			return (0);
		i++;
	}
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   push_swap.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: maoliiny <maoliiny@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/05 15:15:41 by maoliiny          #+#    #+#             */
/*   Updated: 2025/05/12 10:42:23 by maoliiny         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static int	is_duplicate(const long *a, int size)
{
	int	i;
	int	j;

	i = 0;
	while (i < size - 1)
	{
		j = i + 1;
		while (j < size)
		{
			if (a[i] == a[j])
				return (1);
			j++;
		}
		i++;
	}
	return (0);
}

static int	str_isdigit(const char *s)
{
	int	len;
	int	i;

	i = 0;
	len = 0;
	if ((s[i] == '-' || s[i] == '+') && ft_strlen(s) > 1)
	{
		len++;
		i++;
	}
	while (s[i])
		if (ft_isdigit(s[i++]) == 0)
			return (0);
	if (ft_strlen(s) - len < 13)
		return (1);
	return (0);
}

static t_pss	fill_a(int ac, char **av)
{
	t_pss	a;
	int		i;

	a.stack = malloc(sizeof(long) * (ac));
	a.size = ac;
	i = 0;
	if (!a.stack)
		print_error_and_exit(NULL, NULL);
	while (i < ac)
	{
		if (str_isdigit(av[i]))
		{
			a.stack[i] = ft_atoi(av[i]);
			if (a.stack[i] > 2147483647 || a.stack[i] < -2147483648)
			{
				print_error_and_exit(a.stack, NULL);
			}
		}
		else
			print_error_and_exit(a.stack, NULL);
		i++;
	}
	if (is_duplicate(a.stack, ac))
		print_error_and_exit(a.stack, NULL);
	return (a);
}

size_t	find_b_target_idx(t_pss b, long num_to_push)
{
	size_t	i;
	size_t	target_idx;
	long	best_fit_val;

	if (b.size == 0)
		return (0);
	if (num_to_push > ft_max(b) || num_to_push < ft_min(b))
		return (find_index(b, ft_max(b)));
	target_idx = find_index(b, ft_max(b));
	best_fit_val = LONG_MIN;
	i = 0;
	while (i < b.size)
	{
		if (b.stack[i] < num_to_push && b.stack[i] > best_fit_val)
		{
			best_fit_val = b.stack[i];
			target_idx = i;
		}
		i++;
	}
	return (target_idx);
}

int	main(int ac, char **argv)
{
	t_pss	a;
	t_pss	b;
	size_t	min_pos;

	if (ac < 2)
		return (0);
	a = fill_a(ac - 1, &argv[1]);
	if (ft_is_sort(a))
		return (free(a.stack), 0);
	b.stack = ft_calloc(ac - 1, sizeof(long));
	if (!b.stack)
		print_error_and_exit(a.stack, NULL);
	b.size = 0;
	if (a.size <= 5)
		sort_five(&a, &b);
	else
		turk_sort(&a, &b);
	if (a.size > 0 && !ft_is_sort(a))
	{
		min_pos = find_index(a, ft_min(a));
		rotate_to_top(&a, min_pos, 1);
	}
	free(a.stack);
	free(b.stack);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   turk_and_cost.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: maoliiny <maoliiny@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/09 18:51:58 by maoliiny          #+#    #+#             */
/*   Updated: 2025/05/12 10:45:30 by maoliiny         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft_max/libft.h"
#include "push_swap.h"
#include <limits.h>

static int	get_cost(t_pss a, t_pss b, size_t pos_a)
{
	size_t	pos_b_target;
	int		a_cost;
	int		b_cost;

	pos_b_target = find_b_target_idx(b, a.stack[pos_a]);
	a_cost = pos_a;
	if (pos_a > a.size / 2)
		a_cost = a.size - pos_a;
	b_cost = 0;
	if (b.size > 0)
	{
		b_cost = pos_b_target;
		if (pos_b_target > b.size / 2)
			b_cost = b.size - pos_b_target;
	}
	return (a_cost + b_cost + 1);
}

static size_t	find_cheapest(t_pss a, t_pss b)
{
	size_t	cheapest_pos;
	int		min_cost;
	int		current_cost;
	size_t	i;

	min_cost = INT_MAX;
	cheapest_pos = 0;
	i = 0;
	while (i < a.size)
	{
		current_cost = get_cost(a, b, i);
		if (current_cost < min_cost)
		{
			min_cost = current_cost;
			cheapest_pos = i;
		}
		i++;
	}
	return (cheapest_pos);
}

void	rotate_to_top(t_pss *s, size_t pos, int is_a)
{
	if (s->size == 0 || pos >= s->size)
		return ;
	if (pos <= s->size / 2)
	{
		while (pos > 0)
		{
			if (is_a)
				rotate(RA, s);
			else
				rotate(RB, s);
			pos--;
		}
	}
	else
	{
		pos = s->size - pos;
		while (pos > 0)
		{
			if (is_a)
				rrotate(RRA, s);
			else
				rrotate(RRB, s);
			pos--;
		}
	}
}

static size_t	find_a_target_idx(t_pss a, long val_from_b)
{
	size_t	i;
	size_t	target_idx;
	long	closest_larger_val;

	if (a.size == 0)
		return (0);
	if (val_from_b < ft_min(a))
		return (find_index(a, ft_min(a)));
	if (val_from_b > ft_max(a))
		return (find_index(a, ft_min(a)));
	target_idx = 0;
	closest_larger_val = LONG_MAX;
	i = 0;
	while (i < a.size)
	{
		if (a.stack[i] > val_from_b && a.stack[i] < closest_larger_val)
		{
			closest_larger_val = a.stack[i];
			target_idx = i;
		}
		i++;
	}
	return (target_idx);
}

void	turk_sort(t_pss *a, t_pss *b)
{
	size_t	cheapest_a_idx;
	size_t	b_target_idx;
	size_t	a_target_idx;

	pp(PB, a, b);
	pp(PB, a, b);
	sort_five(b, a);
	while (a->size > 3)
	{
		cheapest_a_idx = find_cheapest(*a, *b);
		b_target_idx = find_b_target_idx(*b, a->stack[cheapest_a_idx]);
		rotate_to_top(a, cheapest_a_idx, 1);
		rotate_to_top(b, b_target_idx, 0);
		pp(PB, a, b);
	}
	sort_five(a, b);
	while (b->size > 0)
	{
		a_target_idx = find_a_target_idx(*a, b->stack[0]);
		rotate_to_top(a, a_target_idx, 1);
		pp(PA, b, a);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   push_swap.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: maoliiny <maoliiny@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/08 12:49:23 by maoliiny          #+#    #+#             */
/*   Updated: 2025/05/09 19:10:14 by maoliiny         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PUSH_SWAP_H
# define PUSH_SWAP_H

# include "libft_max/libft.h"
# include <limits.h>
# include <stdlib.h>

# define SA "sa"
# define SB "sb"
# define PA "pa"
# define PB "pb"
# define RR "rr"
# define RRR "rrr"
# define RRA "rra"
# define RRB "rrb"
# define RA "ra"
# define RB "rb"

typedef struct num_array
{
	long	*stack;
	size_t	size;
}			t_pss;
/* operations */
void		ft_swap(long *a, long *b);
void		top_swap(t_pss stack);
void		swap_op(const char *name, t_pss *stack);
void		ss(t_pss a, t_pss b);
void		rotate(char *name, t_pss *stack);
void		pp(const char *op_name, t_pss *from, t_pss *to);
void		rrotate(char *name, t_pss *stack);
void		dual_rotate(const char *name, t_pss a, t_pss b);
/*mini sort*/
long		ft_min(t_pss a);
long		ft_max(t_pss a);
void		sort_five(t_pss *a, t_pss *b);
size_t		find_pos(t_pss b, long num);
size_t		find_index(t_pss stack, long target);
/*utils*/
int			ft_is_sort(t_pss a);
void		print_error_and_exit(long *a, long *b);
/*turk sort*/
void		turk_sort(t_pss *a, t_pss *b);
void		rotate_to_top(t_pss *s, size_t pos, int is_a);
size_t		find_b_target_idx(t_pss b, long num_to_push);
size_t		find_index(t_pss stack, long target);

#endif
